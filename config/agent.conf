input {
  file {
    path => ["/log/elevate-*/*.log"]
    add_field => { "service" => "elevate" }
    tags => ["timestamp_not_interpreted_from_log"]
  }
  stdin {
    add_field => { "service" => "journalctl" }
    codec => "json"
    tags => [ "timestamp_not_interpreted_from_log" ]
  }
}

filter {
  if [service] == "elevate" {
    grok {
      match => { "message" => "%{RUBY_LOGGER}" }
      overwrite => [ "message" ]
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      remove_field => [ "timestamp" ]
      remove_tag => [ "timestamp_not_interpreted_from_log" ]
    }
    ruby {
      code => "event['service'] = /^\/[^\/]+\/([^\/]+)\-\d+\//.match(event['path'])[1]"
    }
  }
  if [service] == "journalctl" {
    if [SYSLOG_IDENTIFIER] =~ /^logging\-(processor|agent)/ {
      drop {
      }
    }
    if [__REALTIME_TIMESTAMP] =~ /^\d+$/ {
      ruby {
        code => "event['timestamp_ms'] = event['__REALTIME_TIMESTAMP'].to_i/1000"
      }
      date {
        match => [ "timestamp_ms", "UNIX_MS" ]
        remove_tag => [ "timestamp_not_interpreted_from_log" ]
      }
    }
    mutate {
      rename => { "MESSAGE" => "message" "_PID" => "pid" "SYSLOG_IDENTIFIER" => "service" }
    }
  }
  ruby {
    code => "event['host'] = ENV['LOGSTASH_HOSTNAME']"
  }
}

output {
  sqs { region => "eu-west-1" queue => "elevate-logs" use_ssl => true workers => 4 }
}